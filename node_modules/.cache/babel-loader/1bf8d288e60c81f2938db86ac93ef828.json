{"ast":null,"code":"var _jsxFileName = \"/Users/dayanasog/Desktop/Estudos/GoStack/desafio05/src/pages/Main/index.js\";\nimport React, { Component } from 'react';\nimport { FaGithubAlt, FaPlus, FaSpinner } from 'react-icons/fa';\nimport { Link } from 'react-router-dom';\nimport api from '../../services/api';\nimport Container from '../../components/Container';\nimport { Form, SubmitButton, List } from './styles';\nexport default class Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      newRepo: '',\n      repositories: [],\n      loading: false,\n      error: null,\n      placeholder: 'Adicione um repositório'\n    };\n\n    this.handleInputChange = e => {\n      this.setState({\n        newRepo: e.target.value\n      });\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      this.setState({\n        loading: true\n      });\n\n      try {\n        const {\n          newRepo,\n          repositories\n        } = this.state;\n        const hasRepo = repositories.find(r => r.name === newRepo);\n        if (hasRepo) throw new Error('Repositório duplicado');\n        if (newRepo === '') throw new Error('Requisição vazia');\n        const response = await api.get(`/repos/${newRepo}`);\n        const data = {\n          name: response.data.full_name\n        };\n        this.setState({\n          repositories: [...repositories, data],\n          newRepo: '',\n          loading: false\n        });\n      } catch (err) {\n        if (err.message === 'Repositório duplicado') {\n          this.setState({\n            newRepo: '',\n            placeholder: 'Repositório duplicado'\n          });\n        }\n\n        if (err.message === 'Requisição vazia') {\n          this.setState({\n            newRepo: '',\n            placeholder: 'Digite um repositório valido'\n          });\n        }\n\n        if (err.response.status === 404) {\n          this.setState({\n            error: true,\n            placeholder: 'Repositório não encontrado'\n          });\n        }\n      } finally {\n        this.setState({\n          loading: false\n        });\n      }\n    };\n  }\n\n  // Get data from localStorage\n  componentDidMount() {\n    const repositories = localStorage.getItem('repositories');\n\n    if (repositories) {\n      this.setState({\n        repositories: JSON.parse(repositories)\n      });\n    }\n  } // Save update in the localStorage\n\n\n  componentDidUpdate(_, prevState) {\n    const {\n      repositories\n    } = this.state;\n    if (prevState.repositories !== repositories) localStorage.setItem('repositories', JSON.stringify(repositories));\n  }\n\n  render() {\n    const {\n      newRepo,\n      repositories,\n      loading,\n      error,\n      placeholder\n    } = this.state;\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(FaGithubAlt, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), \"Reposit\\xF3rios\"), React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      error: error,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: placeholder,\n      value: newRepo,\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), React.createElement(SubmitButton, {\n      loading: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, loading ? React.createElement(FaSpinner, {\n      color: \"#FFF\",\n      size: 14,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }) : React.createElement(FaPlus, {\n      color: \"#FFF\",\n      size: 14,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }))), React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, repositories.map(repository => React.createElement(\"li\", {\n      key: repository.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, repository.name), React.createElement(Link, {\n      to: `/repository/${encodeURIComponent(repository.name)}`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, \"Detalhes\")))));\n  }\n\n}","map":{"version":3,"sources":["/Users/dayanasog/Desktop/Estudos/GoStack/desafio05/src/pages/Main/index.js"],"names":["React","Component","FaGithubAlt","FaPlus","FaSpinner","Link","api","Container","Form","SubmitButton","List","Main","state","newRepo","repositories","loading","error","placeholder","handleInputChange","e","setState","target","value","handleSubmit","preventDefault","hasRepo","find","r","name","Error","response","get","data","full_name","err","message","status","componentDidMount","localStorage","getItem","JSON","parse","componentDidUpdate","_","prevState","setItem","stringify","render","map","repository","encodeURIComponent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { FaGithubAlt, FaPlus, FaSpinner } from 'react-icons/fa';\nimport { Link } from 'react-router-dom';\n\nimport api from '../../services/api';\n\nimport Container from '../../components/Container';\nimport { Form, SubmitButton, List } from './styles';\n\nexport default class Main extends Component {\n  state = {\n    newRepo: '',\n    repositories: [],\n    loading: false,\n    error: null,\n    placeholder: 'Adicione um repositório',\n  };\n\n  // Get data from localStorage\n  componentDidMount () {\n    const repositories = localStorage.getItem('repositories');\n\n    if (repositories) {\n      this.setState({ repositories: JSON.parse(repositories) })\n    }\n  }\n\n  // Save update in the localStorage\n  componentDidUpdate (_, prevState) {\n    const { repositories } = this.state;\n\n    if (prevState.repositories !== repositories )\n      localStorage.setItem('repositories', JSON.stringify(repositories));\n\n  }\n\n\n  handleInputChange = e => {\n    this.setState({ newRepo: e.target.value });\n  };\n\n  handleSubmit = async e => {\n    e.preventDefault();\n\n    this.setState({ loading: true });\n\n    try {\n      const { newRepo, repositories  } = this.state;\n\n      const hasRepo = repositories.find(r => r.name === newRepo);\n\n      if (hasRepo) throw new Error('Repositório duplicado');\n\n      if ( newRepo === '' ) throw new Error('Requisição vazia');\n\n      const response = await api.get(`/repos/${newRepo}`)\n\n      const data = {\n        name: response.data.full_name,\n      };\n\n      this.setState({\n        repositories: [...repositories, data],\n        newRepo: '',\n        loading: false,\n      });\n    }\n\n    catch (err) {\n      if ( err.message === 'Repositório duplicado') {\n        this.setState({\n          newRepo: '',\n          placeholder: 'Repositório duplicado',\n        });\n      }\n\n      if (err.message === 'Requisição vazia') {\n        this.setState({\n          newRepo: '',\n          placeholder: 'Digite um repositório valido',\n        });\n      }\n\n      if ( err.response.status === 404 ) {\n        this.setState({\n          error: true,\n          placeholder: 'Repositório não encontrado'\n        });\n      }\n    }\n\n    finally {\n      this.setState({ loading: false });\n    }\n\n  };\n\n  render() {\n    const { newRepo, repositories, loading, error, placeholder } = this.state;\n\n    return (\n      <Container>\n        <h1>\n          <FaGithubAlt />\n          Repositórios\n        </h1>\n\n        <Form onSubmit={this.handleSubmit} error={error}>\n          <input\n            type=\"text\"\n            placeholder={placeholder}\n            value={newRepo}\n            onChange={this.handleInputChange}\n          />\n\n          <SubmitButton loading={loading}>\n            { loading ? (\n              <FaSpinner color=\"#FFF\" size={14} />\n            ) : (\n              <FaPlus color=\"#FFF\" size={14} />\n            )}\n          </SubmitButton>\n        </Form>\n\n        <List >\n          {repositories.map(repository => (\n            <li key={repository.name}>\n              <span>{repository.name}</span>\n              <Link to={`/repository/${encodeURIComponent(repository.name)}`}>Detalhes</Link>\n            </li>\n          ))}\n        </List>\n      </Container>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}